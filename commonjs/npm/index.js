(()=>{var __webpack_modules__={553:function(__unused_webpack_module,exports){const _={_P:1};function bind(r,...e){!0===r.curryed&&(r=uncurry(r));let t=[],n=[],u=0;return e.forEach(((r,e)=>{r==_&&(++u,t.push(e)),n.push(r)})),summon(u,(function(){let e=Object.values(arguments),u=[...n];return t.forEach((r=>u[r]=e.shift())),r.apply(this,u)}))}function curry(r,...e){if(r.length===e.length)return r.call(null,...e);{let t=curry.bind(null,...arguments);return t.curryed=!0,t.len=r.length-(arguments.length-1),t.origin=r.bind(null,...e),t}}function uncurry(r){return r.origin}const filter=curry(((r,e)=>e.filter((e=>r(e))))),reject=curry(((r,e)=>e.filter((e=>!r(e))))),shied=curry(((r,e)=>(Array.isArray(r)||(r=[r]),e.filter((e=>!r.includes(e)))))),choose=curry(((r,e)=>(Array.isArray(r)||(r=[r]),e.filter((e=>r.includes(e))))));function __boom(r){let e=r.shift().map((r=>[r])),t=[];return r.forEach((r=>{r.forEach((r=>e.forEach((e=>t.push([...e,r]))))),e=[...t],t=[]})),e}function iterate(r,...e){let t=!0===r.curryed?uncurry(r):r,n=[],u=[];return e.forEach((r=>n.push(Array.isArray(r)?r:[r]))),__boom(n).forEach((r=>u.push(t.apply(null,r)))),u}const map=curry(((r,e)=>e.map((e=>r(e))))),flatMap=curry(((r,e)=>e.reduce(((e,t)=>e.concat(r(t))),[]))),foreach=curry(((r,e)=>{e.forEach(r)})),reduce=curry(((r,e,t)=>null!=e?t.reduce(r,e):t.reduce(r))),fold=curry(((r,e,t)=>{for(;e--;)t=r(t);return t})),scan=curry(((r,e,t)=>{let n=[];for(;t--;)n.push(r=e(r));return n})),zipWith=curry(((r,e,t)=>{let n=[],u=0,i=Math.min(e.length,t.length);for(;u<i;)n.push(r(e[u],t[u])),++u;return n})),zip=zipWith(((r,e)=>[r,e])),join=curry(((r,e)=>e.join(r))),slice=curry(((r,e,t)=>t.splice(r,e))),take=curry(((r,e)=>slice(0,r-1,e))),takeWhile=curry(((r,e)=>{let t=[],n=0,u=e.length;for(;n<u&&r(e[n]);)t.push(e[n]),++n;return t})),drop=curry(((r,e)=>e.slice(r))),dropWhile=curry(((r,e)=>{let t=[],n=0,u=e.length,i=!1;for(;n<u;)i?t.push(e[n]):r(e[n])||(i=!0,t.push(e[n])),++n;return t})),allCheck=curry(((r,e)=>{let t=0,n=e.length;for(;t<n;){if(!r(e[t]))return!1;++t}return!0})),anyCheck=curry(((r,e)=>{let t=0,n=e.length;for(;t<n;){if(r(e[t]))return!0;++t}return!1})),concat=curry(((r,e)=>Array.isArray(r)?r.concat(e):r+e)),head=r=>r[0],tail=r=>r[r.length-1],dropHead=r=>drop(1,r),dropTail=r=>r.splice(0,-1);function reverse(r){let e=[],t=r.length-1;for(;t>=0;)e.push(r[t]),--t;return e}const either=curry(((r,e)=>r||e)),both=curry(((r,e)=>r&&e)),id=r=>r,gt=curry(((r,e)=>r>e)),gte=curry(((r,e)=>r>=e)),lt=curry(((r,e)=>r<e)),lte=curry(((r,e)=>r<=e)),equal=curry(((r,e)=>r==e)),arr_equal=curry(((r,e)=>r.length===e.length||reduce(((r,t,n)=>0!=r&&t==e[n]),!0)(r))),common=r=>r,always=r=>()=>r,when=curry(((r,e)=>function(t){if(r(t))return e()})),unless=curry(((r,e)=>function(t){if(!r(t))return e()})),ifElse=curry(((r,e,t)=>function(n){return r(n)?e():t()})),when_v=curry(((r,e)=>function(t){if(r(t))return e(t)})),unless_v=curry(((r,e)=>function(t){if(!r(t))return e(t)})),ifElse_v=curry(((r,e,t)=>function(n){return r(n)?e(n):t(n)}));function match(...r){return function(e){for(let t=0;t<r.length;t+=2){if(e==r[t]||r[t]==_)return Array.isArray(e)&&e.length?r[t+1](e,e[0],dropHead(e)):r[t+1](e);if(Array.isArray(r[t])&&Array.isArray(e)&&arr_equal(e,r[t]))return Array.isArray(e)&&e.length?r[t+1](e,e[0],dropHead(e)):r[t+1](e);if("function"==typeof r[t]&&r[t](e))return r[t+1](e);if(Maybe.is(r[t])&&Maybe.is(e)){if(r[t].isNothing()&&e.isNothing())return r[t+1](e);if(r[t].isNothing()||e.isNothing())continue;if(r[t].value===e.value)return r[t+1](e);if(Array.isArray(r[t].value)&&Array.isArray(e.value)&&arr_equal(r[t].value,e.value))return r[t+1](e)}}}}const odd=r=>r%2,even=r=>!(r%2),add=curry(((r,e)=>r+e)),minus=curry(((r,e)=>r-e)),mul=curry(((r,e)=>r*e)),div=curry(((r,e)=>r/e)),mod=curry(((r,e)=>r%e)),rema=curry(((r,e)=>(r%e+e)%e)),power=curry(((r,e)=>Math.pow(r,e))),negate=r=>-r,upper=(r,e)=>r<e?-1:r>e?1:0,under=(r,e)=>r>e?-1:r<e?1:0,sort=curry(((r,e)=>null!=e?r.sort(e):r.sort()));function median(r){let e=2-(1&r.length),t=r.length-e>>1;return average(Array.prototype.slice.call(r,0).sort(((r,e)=>r<e?-1:r>e?1:0)).slice(t,t+e))}function sum(r){return r.reduce(((r,e)=>r+e))}function prod(r){return r.reduce(((r,e)=>r*e))}function max(r){return r.reduce(((r,e)=>r>e?r:e))}function min(r){return r.reduce(((r,e)=>r<e?r:e))}function average(r){return sum(r)/r.length}function inc(r){return r+1}function dec(r){return r-1}class Maybe extends Monad{constructor(r){super(r)}static lift(r){return new Maybe(r)}static is(r){return"[object Object]"===Object.prototype.toString.call(r)&&r.constructor===Maybe}isNothing(){return null===this.value||void 0===this.value}map(r){return this.isNothing()?new Maybe(null):new Maybe(r(this.value))}chain(r){return this.isNothing()?new Maybe(null):r(this.value)}fold(r,e){return this.isNothing()?r(this.value):e(this.value)}}const Nothing=Maybe.lift(null),Just=r=>Maybe.lift(r);class Monad{constructor(r){this.value=r}static lift(r){return new Monad(r)}map(r){return this.lift(r(this.v))}chain(r){return r(this.value)}apply(r){return r.map(this.value)}}function _assoc(r,e,t){if(Array.isArray(t)){let n=[].concat(t);return n[r]=e,n}let n={};for(let r in t)n[r]=t[r];return n[r]=e,n}function _shallowCloneObject(r,e){if(Number.isInteger(r)&&Array.isArray(e))return[].concat(e);let t={};for(let r in e)t[r]=e[r];return t}function _remove(r,e,t){let n=Array.prototype.slice.call(t,0);return n.splice(r,e),n}function _dissoc(r,e){if(Number.isInteger(r)&&Array.isArray(e))return _remove(r,1,e);let t={};for(let r in e)t[r]=e[r];return delete t[r],t}const prop=curry(((r,e)=>{if(Array.isArray(r)){let t=e;for(let e in r)t=t[r[e]];return t}return e[r]})),assoc=curry(((r,e,t)=>{if(Array.isArray(r)){let n=r[0];if(r.length>1){let u=!Just(t).isNothing()&&Object.prototype.hasOwnProperty.call(t,n)?t[n]:Number.isInteger(path[1])?[]:{};e=assoc(Array.prototype.slice.call(r,1),e,u)}return _assoc(n,e,t)}return _assoc(r,e,t)})),modify=curry(((r,e,t)=>{if(Array.isArray(r)){let n=t;for(let t in r){if(t==r.length-1){if(Just(n[r[t]]).isNothing())return Nothing;n[r[t]]=e(n[r[t]])}n=n[r[t]]}}else{if(Just(t[r]).isNothing())return Nothing;t[r]=e(t[r])}return t})),dissoc=curry(((r,e)=>{if(!Array.isArray(r))return _dissoc(r,e);switch(r.length){case 0:return e;case 1:return _dissoc(r[0],e);default:let t=r[0],n=Array.prototype.slice.call(r,1);return null==e[t]?_shallowCloneObject(t,e):assoc(t,dissoc(n,e[t]),e)}}));function valuesIn(r){let e=[];for(let t in r)e.push(r[t]);return r}function makePair(r){let e={};for(let t in r)e[r[t][0]]=r[t][1];return e}const construct=r=>curry(summon(r.constructor.length,((...e)=>new r(...e)))),has=curry(((r,e)=>e.hasOwnProperty(r)));class Lens{constructor(r,e){this.get=r,this.set=e}static of(r,e){return new Lens(r,e)}static bind(r){return new Lens(prop(r),assoc(r))}}const view=curry(((r,e)=>r.get(e))),set=curry(((r,e,t)=>r.set(e,t))),over=curry(((r,e,t)=>r.set(e(r.get(t)),t))),range=curry(((r,e)=>{if("number"==typeof r&&"number"==typeof e)return new Array(e-r+1).fill(r).map(((e,t)=>r+t));if("string"==typeof r&&"string"==typeof e){let t=r.charCodeAt(),n=e.charCodeAt();return new Array(n-t+1).fill(r).map(((r,e)=>String.fromCharCode(t+e)))}})),higherPipe=curry(((r,e)=>{let t,n,u=[],i=[];return e.forEach(((e,t)=>{0!==e&&(u.push(r[t]),i.push(e))})),t=u.shift(),n=i.shift(),0===u.length?fold(t,n):summon(t.length,((...r)=>pipe.apply(this,u.map(((r,e)=>fold(r,i[e]))))(1===t.len?fold(t,n,r[0]):t(...r))))})),higherComp=curry(((r,e)=>{let t,n,u=[],i=[];return e.forEach(((e,t)=>{0!==e&&(u.push(r[t]),i.push(e))})),t=u.pop(),n=i.pop(),0===u.length?fold(t,n):summon(t.length,((...r)=>compose.apply(this,u.map(((r,e)=>fold(r,i[e]))))(1===t.len?fold(t,n,r[0]):t(...r))))})),coalgebra=curry(((r,e)=>()=>r=e(r))),stateMachine=curry(((r,e)=>t=>r=higherPipe(e,t)(r))),rexMatch=curry(((r,e)=>e.match(r))),rexReplace=curry(((r,e,t)=>t.replace(r,e))),rexTest=curry(((r,e)=>e.test(r))),toString=curry((r=>Just(r).isNothing()?Nothing:r.toString())),split=curry(((r,e)=>e.split(r))),toLower=r=>r.toLowerCase(),toUpper=r=>r.toUpperCase(),trim=r=>r.trim(),words=r=>String(r).toLowerCase().split(/\s|\b/).filter((function(r){return/^[\w]+$/.test(r)}));function summon(total,fn){let result;return eval(`result=function(${Array(total).fill(0).map(((r,e)=>"a"+e)).toString()}){return fn.apply(this,arguments)}`),result}function compose(...r){return 1===r.length?r[0]:summon(r[r.length-1].length,r.reduce(((r,e)=>(...t)=>r(e(...t)))))}function pipe(...r){return 1==r.length?r[0]:summon(r[0].length,(function(){let e=r.shift().apply(this,arguments);return r.reduce(((r,e)=>e(r)),e)}))}const call=curry(((r,e)=>r.apply(this,e)));exports={curry,uncurry,filter,reject,shied,choose,iterate,map,flatMap,foreach,reduce,fold,scan,odd,even,add,minus,mul,div,mod,rema,power,upper,under,sort,sum,prod,negate,average,median,max,min,inc,dec,range,compose,pipe,call,_,bind,either,both,id,gt,gte,lt,lte,equal,arr_equal,common,always,when,unless,ifElse,when_v,unless_v,ifElse_v,summon,match,higherPipe,higherComp,coalgebra,stateMachine,Maybe,Nothing,Just,prop,assoc,modify,dissoc,valuesIn,makePair,construct,has,Lens,view,set,over,rexMatch,rexReplace,rexTest,toString,split,toLower,toUpper,trim,words,zipWith,zip,join,slice,take,takeWhile,drop,dropWhile,allCheck,anyCheck,concat,head,tail,dropHead,dropTail,reverse}}},__webpack_exports__={};__webpack_modules__[553](0,__webpack_exports__);var __webpack_export_target__=exports;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();